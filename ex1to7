/*EX1
#include <iostream>
#include <math.h>
using namespace std;

bool distance_point(double c_x,double c_y, double x, double y, double r){
  double d=sqrt((x-c_x)*(x-c_x)+(y-c_y)*(y-c_y));
  if (d<r)
    return true;
  return false;
}

int main() {
  double c_x,c_y,r,x,y;
  cout<<"Choose the center of a circle on the x axis: ";
  cin>>c_x;
  cout<<"Choose the center of a circle on the y axis: ";
  cin>>c_y;
  do{
    cout<<"Choose the radius of the circle: ";
    cin>>r;
  } while (r<=0);
  cout<<"Choose a coordinate on the x axis: ";
  cin>>x;
  cout<<"Choose a coordinate on the y axis: ";
  cin>>y; 
  if(distance_point(c_x,c_y,x,y,r))
    cout<<"The point is in the circle"<<endl;
  else
    cout<<"The point is not in the circle"<<endl;
  return 0;
}
*/


/*EX2
#include <iostream>
#include <math.h>
using namespace std;

double distance_point(double x,double v, double a, double t){
  double d=x+v*t+0.5*a*t*t;
  return d;
}

int main() {
  double x,v,a,n,t=0,ut;
  cout<<"We want to calculate the time evolution of a body that is horizontally moving in a mono-dimensional space."<<endl;
  do{
    cout<<"Choose the initial position: ";
    cin>>x;
  } while (x<0);
  do{
    cout<<"Choose the speed: ";
    cin>>v;
  } while (v<0); 
    cout<<"Choose the acceleration: ";
    cin>>a;
  do{
    cout<<"How many times you want to display the position of the moving body? ";
    cin>>n;
  } while (n<0); 
  do{
    cout<<"How often (in seconds) you want to update te position of the moving object? ";
    cin>>ut;
  } while (t<0); 
  while(n>0){
    cout<<"At time  "<<t<<" the position is "<<distance_point(x,v,a,t)<<endl;
    n=n-1;
    t=t+ut;
  }
}
*/


/*EX3
#include <iostream>
using namespace std;

void swap(int &x,int &y){
  int a=y;
  y=x;
  x=a;
} 

int main() {
  int x,y;
  cout<<"Choose the value of x:";
  cin>>x;
  cout<<"Choose the value of y:";
  cin>>y;
  cout<<"The value of x and y is "<<x<<" and "<<y<<endl;
  swap(x,y);
  cout<<"The value of x and y after the swap is "<<x<<" and "<<y<<endl;
}
*/



/*EX4
#include <iostream>
using namespace std;

int main() {
  int m=0,n=0,a=1,r;
  cout<<"Choose the number of rows in your Floyd triangle :";
  cin>>r;

  for (n=0;n<r;n++){
    for (m=0;m<=n;m++){
      cout<<a<<" ";
      a=a+1;
    }
    cout<<endl;
  }
}
*/



/*EX5
#include <iostream>
using namespace std;


int fibonacci(int choice){
  int i,first=0,second=1,result;
  if (choice==1){
    result=1;
  }
  if (choice==0){
    result=0;
  }
  for (i=2;i<=choice;++i){
    result=first+second;
    first=second;
    second=result;
  }
  return result;
}

int main() {
  int first=0,second=2,result,i,choice;
  cout<<"Enter the number of the Fibonacci serie you want to appear: ";
  cin>>choice;
  cout<<fibonacci(choice);
}
*/


/*EX6
#include <iostream>
using namespace std;

int calls;

int fibonacci(int n){
  calls++;
  if (n==1)
    return 1;
  if (n==0)
    return 0;
  else {
    return fibonacci(n-1)+fibonacci(n-2);
  }
}

int main() {
  int n;
  cout << "Choose the value of n for the Fibonacci function to have the result such as f(n):";
  cin>>n;
  calls=0;
  cout<<"The result is "<<fibonacci(n);
  cout<<" and has been found with "<<calls<<" recursive calls.";
}
*/


/*EX7part1

#include <iostream>
#include <math.h>
using namespace std;

int calls;

int power(int a, int n){
  calls++;
  if (n!=0){
    return a*power(a,n-1);
  }
  else {
    return 1;
  }
}

int main() {
  int a,n,result;
  cout<<"Choose a:";
  cin>>a;
  cout<<"Choose its power n:";
  cin>>n;
  calls=0;
  cout<<a<<" to the power of "<<n<<" is "<<power(a,n)<<endl;
  cout<<"This result has been found with "<<calls<<" recursive calls.";
}
*/


/*EX7part2
int calls;

#include <iostream>
#include <math.h>
using namespace std;

int power_odd_even(int a, int n){
  calls++;
  if (n==0){
    return 1;
  }
  if(n%2!=0){
    return a*power_odd_even(a,n/2)*power_odd_even(a,n/2);
  }
  if (n%2==0){
      return power_odd_even(a,n/2)*power_odd_even(a,n/2);
  }
}


int main() {
  int a,n,result;
  cout<<"Choose a:";
  cin>>a;
  cout<<"Choose its power n:";
  cin>>n;
  calls=0;
  cout<<a<<" to the power of "<<n<<" is "<<power_odd_even(a,n)<<endl;
  cout<<"This result has been found with "<<calls<<" recursive calls.";
}
*/

/*EX7part3
#include <iostream>
#include <math.h>
using namespace std;

int callsv1;

int power(int a, int n){
  callsv1++;
  if (n!=0){
    return a*power(a,n-1);
  }
  else {
    return 1;
  }
}

int callsv2;

int power_odd_even(int a, int n){
  callsv2++;
  if (n==0){
    return 1;
  }
  if(n%2!=0){
    return a*power_odd_even(a,n/2)*power_odd_even(a,n/2);
  }
  if (n%2==0){
      return power_odd_even(a,n/2)*power_odd_even(a,n/2);
  }
}

int main() {
  int a,n,result;
  cout<<"Choose a:";
  cin>>a;
  cout<<"Choose its power n:";
  cin>>n;
  callsv1=0;
  callsv2=0;
  cout<<"With method 1, "<<a<<" to the power of "<<n<<" is "<<power(a,n)<<endl;
  cout<<"With method 1, this result has been found with "<<callsv1<<" recursive calls."<<endl;
  cout<<"With method 2, "<<a<<" to the power of "<<n<<" is "<<power_odd_even(a,n)<<endl;
  cout<<"With method 2, this result has been found with "<<callsv2<<" recursive calls."<<endl;
}
*/

/*EX7_Answer
We can see that the number of recursive calls with method 1, is equal to n+1.

For method 2, it is a 'fonction en escalier' with the length of the 'steps' which are growing following this format : 1,2-3,4-7,8-15, etc. 
the length itself grows by an exponentional function of 2^x. The value associated with the steps is equal to the sum of the exponential result of 2^x. 
Thus it would give us: for f(1):1+2=3, f(2)=f(3)=1+2+4=7, f(4) to f(7)=1+2+4+8=15, f(8) to f(15)=1+2+4+8+16=31, f(16) to f(31)=f(15)+32=63, f(32) to f(63)=127 and so on. 
Did not find how to model that as a function. 
*/
